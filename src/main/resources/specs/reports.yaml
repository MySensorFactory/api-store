openapi: 3.0.3
info:
  title: Reports API
  description: API for creating and retrieving reports
  version: 1.0.0

paths:
  /reports:
    post:
      summary: Creates report with given time window and other parameters
      operationId: createReport
      tags:
        - reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertReportRequest'
      responses:
        '200':
          description: Successfully created report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertReportResponse'
        '403':
          $ref: "commons.yaml#/components/responses/ClientError"
        '500':
          $ref: "commons.yaml#/components/responses/ServerError"

  /reports/search:
    post:
      operationId: searchReports
      tags:
        - reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchReportsRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReportListResponse'
        '403':
          $ref: "commons.yaml#/components/responses/ClientError"
        '500':
          $ref: "commons.yaml#/components/responses/ServerError"

  /reports/{id}:
    get:
      operationId: getReportDetails
      tags:
        - reports
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReportDetailsResponse'
              example: {
                "id": "00000000-0000-0000-0000-000000000000",
                "description": "Test report",
                "timeRange": {
                  "from": 1588888888888,
                  "to": 1588888889999
                },
                "dataBySensorType": {
                  "temperature": {
                    "d36f3300-eae7-471e-abf2-b2f71fa58652": {
                      "timestamp": 1588888888888,
                      "label": "afterCompressor",
                      "eventKey": "d36f3300-eae7-471e-abf2-b2f71fa58652",
                      "sensorType": "temperature",
                      "values": {
                        "value": 20.0
                      }
                    },
                    "0590d86b-da41-4c4f-bbfd-daaf95e5a752": {
                      "timestamp": 1588888888889,
                      "label": "afterCompressor",
                      "eventKey": "0590d86b-da41-4c4f-bbfd-daaf95e5a752",
                      "sensorType": "temperature",
                      "values": {
                        "value": 20.1
                      }
                    }
                  },
                  "flowRate": {
                    "d36f3300-eae7-471e-abf2-b2f71fa58652": {
                      "timestamp": 1588888888888,
                      "label": "afterCompressor",
                      "eventKey": "d36f3300-eae7-471e-abf2-b2f71fa58652",
                      "sensorType": "flowRate",
                      "values": {
                        "CO2": 0.2,
                        "NH3": 0.2,
                        "N3": 0.2,
                        "H2": 0.2,
                        "O2": 0.2
                      }
                    },
                    "0590d86b-da41-4c4f-bbfd-daaf95e5a752": {
                      "timestamp": 1588888888889,
                      "label": "afterCompressor",
                      "eventKey": "0590d86b-da41-4c4f-bbfd-daaf95e5a752",
                      "sensorType": "flowRate",
                      "values": {
                        "CO2": 0.2,
                        "NH3": 0.2,
                        "N3": 0.2,
                        "H2": 0.2,
                        "O2": 0.2
                      }
                    }
                  }
                }
              }
        '403':
          $ref: "commons.yaml#/components/responses/ClientError"
        '500':
          $ref: "commons.yaml#/components/responses/ServerError"

    patch:
      operationId: updateReport
      tags:
        - reports
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertReportRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertReportResponse'
        '403':
          $ref: "commons.yaml#/components/responses/ClientError"
        '500':
          $ref: "commons.yaml#/components/responses/ServerError"

    delete:
      operationId: deleteReport
      tags:
        - reports
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful response
        '403':
          $ref: "commons.yaml#/components/responses/ClientError"
        '500':
          $ref: "commons.yaml#/components/responses/ServerError"

components:
  schemas:
    Sorting:
      type: object
      properties:
        order:
          enum:
            - asc
            - desc
        name:
          type: string

    Filter:
      type: object
      properties:
        textQuery:
          description: This query is applied for each text field
          type: string
        keywords:
          type: object
          description: Keyword queries. Corresponding keyword values are mapped to keyword names.
          additionalProperties:
            type: array
            items:
              type: string
          example:
            keywords:
              "label": ["LabelA", "LabelB"]
              "includedSensors": ["temperature", "pressure"]
        textFields:
          description: Fields in report where testQuery is applied
          type: array
          items:
            type: string
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
      required:
        - textFields
        - keywords

    SearchReportsRequest:
      type: object
      properties:
        pageSize:
          type: integer
        page:
          type: integer
        sorting:
          type: array
          description: By default uses sorting by score
          items:
            $ref: "#/components/schemas/Sorting"
        filter:
          $ref: "#/components/schemas/Filter"

    UpsertReportRequest:
      type: object
      properties:
        timeRange:
          $ref: 'commons.yaml#/components/schemas/TimeRange'
        includedSensors:
          type: array
          items:
            type: string
        label:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - sensorLabels
        - label
        - name
        - description

    UpsertReportResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid

    GetReportListResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReportPreview'
        totalItems:
          type: integer

    GetSingleReportResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/DetailedSensorData'

    ReportPreview:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        includedSensors:
          type: array
          items:
            type: string
        label:
          type: string
        timeRange:
          $ref: 'commons.yaml#/components/schemas/TimeRange'

    GetReportDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/ReportPreview'
        - properties:
            description:
              type: string
            dataBySensorType:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/InstantData'

    InstantData:
      type: array
      items:
        $ref: 'commons.yaml#/components/schemas/SensorData'

    DetailedSensorData:
      type: object
      allOf:
        - $ref: 'commons.yaml#/components/schemas/SensorData'
        - properties:
            eventKey:
              type: string
              format: uuid
            label:
              type: string
            sensorType:
              type: string
